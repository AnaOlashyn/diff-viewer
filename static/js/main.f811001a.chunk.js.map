{"version":3,"sources":["TreeList.jsx","App.jsx","index.js"],"names":["TreeList","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","nodes","dataList","handleClick","bind","assertThisInitialized","toogleClick","inherits","createClass","key","value","nextProps","setState","e","index","onChangeDisplay","onChangeDisplay2Level","_this2","react_default","a","createElement","undefined","List","id","as","keys","map","item","Item","Content","className","onClick","status","Header","display","indexOf","storage","toString","display2level","Array","isArray","elements","element","name","substring","length","interfaces","changes","physAddress","new","React","Component","App","leftList","rightList","updateArray","displayChange","display2levelChange","getJson","data","require","left","right","arr","elem","newState","filter","concat","TreeList_TreeList","ReactDOM","render","App_App","document","querySelector"],"mappings":"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","file":"static/js/main.f811001a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { List } from 'semantic-ui-react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport './TreeList.scss';\r\n\r\nexport class TreeList extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { nodes: this.props.dataList.nodes };\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.toogleClick = this.toogleClick.bind(this);\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    this.setState({ nodes: nextProps.dataList.nodes });\r\n  }\r\n\r\n  handleClick(e, index) {\r\n\r\n    this.props.onChangeDisplay(index);\r\n\r\n  }\r\n\r\n  toogleClick(e, index) {\r\n    this.props.onChangeDisplay2Level(index);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.nodes !== undefined &&\r\n          (\r\n            <List id=\"listBlock\" as='ol'>\r\n              {Object.keys(this.state.nodes).map((item, index) =>\r\n                (\r\n                  <List.Item as='li' value= \"•\">\r\n                    <List.Content className = \"listItem\" onClick={(e) => this.handleClick(e, index)}>\r\n                      {this.state.nodes[item].status !== undefined &&\r\n                        <List.Header id={this.state.nodes[item].status}>{item}</List.Header>\r\n                      }\r\n                      {this.state.nodes[item].status === undefined &&\r\n                        <List.Header id=\"unchanged\">{item}</List.Header>\r\n                      }\r\n                    </List.Content>\r\n                    {this.props.display.indexOf(index) > -1 &&\r\n                      <List.List >\r\n                        {this.state.nodes[item].storage !== undefined &&\r\n                          <List.Item as='li' value= \"•\">\r\n                            <List.Content>\r\n                              <List.Header className = \"listItem\" onClick={(e) => this.toogleClick(e, index.toString() + \".1\")}>storage</List.Header>\r\n                            </List.Content>\r\n                            {this.props.display2level.indexOf(index.toString() + \".1\") > -1 &&\r\n                              <List.List >\r\n                                {Array.isArray(this.state.nodes[item].storage) === false &&\r\n                                  this.state.nodes[item].storage.elements.map(element =>\r\n                                    (\r\n                                      <List.Item as='li' value= \" \">\r\n                                        <List.Content>\r\n                                          <List.Header id={element.status}>\r\n                                            {element.name.substring((item + \"-storages-\").length)}\r\n                                          </List.Header>\r\n                                        </List.Content>\r\n                                      </List.Item>\r\n                                    )\r\n                                  )\r\n                                }\r\n                                {Array.isArray(this.state.nodes[item].storage) &&\r\n                                  this.state.nodes[item].storage.map(element =>\r\n                                    (\r\n                                      <List.Item as='li' value= \" \">\r\n                                        <List.Content>\r\n                                          <List.Header>\r\n                                            {element.substring((item + \"-storages-\").length)}\r\n                                          </List.Header>\r\n                                        </List.Content>\r\n                                      </List.Item>\r\n                                    )\r\n                                  )\r\n                                }\r\n                              </List.List>\r\n                            }\r\n                          </List.Item>\r\n                        }\r\n                        {this.state.nodes[item].interfaces !== undefined &&\r\n                          <List.Item as='li' value= \"•\">\r\n                            <List.Content>\r\n                              <List.Header className = \"listItem\" onClick={(e) => this.toogleClick(e, index.toString() + \".2\")}>interfaces</List.Header>\r\n                            </List.Content>\r\n                            {this.props.display2level.indexOf(index.toString() + \".2\") > -1 &&\r\n                              <List.List>\r\n                                {Array.isArray(this.state.nodes[item].interfaces) === false &&\r\n                                  this.state.nodes[item].interfaces.elements.map(element =>\r\n                                    (\r\n                                      <List.Item as='li' value= \" \">\r\n                                        <List.Content>\r\n                                          <List.Header id={element.status}>\r\n                                            {element.name.substring((item + \"-snmp-interfaces-\").length)}\r\n                                            {element.changes !== undefined &&\r\n                                              <List.List>\r\n                                                <List.Item as='li' value= \" \">\r\n                                                  <List.Content>\r\n                                                    <List.Header id =\"adress\">{element.changes.physAddress.new}</List.Header>\r\n                                                  </List.Content>\r\n                                                </List.Item>\r\n                                              </List.List>\r\n                                            }\r\n                                          </List.Header>\r\n                                        </List.Content>\r\n                                      </List.Item>\r\n                                    )\r\n                                  )\r\n                                }\r\n                                {Array.isArray(this.state.nodes[item].interfaces) &&\r\n                                  this.state.nodes[item].interfaces.map(element =>\r\n                                    (\r\n                                      <List.Item as='li' value= \" \">\r\n                                        <List.Content>\r\n                                          <List.Header>\r\n                                            {element.substring((item + \"-snmp-interfaces-\").length)}\r\n                                          </List.Header>\r\n                                        </List.Content>\r\n                                      </List.Item>\r\n                                    )\r\n                                  )\r\n                                }\r\n                              </List.List>\r\n                            }\r\n                          </List.Item>\r\n                        }\r\n                      </List.List>\r\n                    }\r\n                  </List.Item>\r\n                )\r\n              )}\r\n            </List>\r\n          )}\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport './App.scss';\r\nimport { TreeList } from './TreeList';\r\n\r\n\r\nexport class App extends React.Component {\r\n\r\nconstructor(props){\r\n  super(props);\r\n  this.state = { leftList: {}, rightList: {}, display: [], display2level: [] }\r\n  this.updateArray = this.updateArray.bind(this);\r\n  this.displayChange = this.displayChange.bind(this);\r\n  this.display2levelChange = this.display2levelChange.bind(this);\r\n}\r\n\r\n  componentDidMount() {\r\n    this.getJson();\r\n  }\r\n\r\n  getJson() {\r\n    let data = require('./example.json');\r\n    this.setState({ leftList: data.left, rightList: data.right });\r\n  }\r\n\r\n  updateArray(arr, elem) {\r\n    let inArray = arr.indexOf(elem) !== -1;\r\n    let newState = [];\r\n    if (inArray) { \r\n      newState = arr.filter(function (item) { return item !== elem });\r\n    } else { \r\n      newState = newState.concat(arr, [elem]);\r\n    }\r\n    return newState;\r\n  }\r\n\r\n  displayChange(index) {\r\n    let newState = this.updateArray(this.state.display, index);\r\n    this.setState({ display: newState });\r\n  }\r\n\r\n  display2levelChange(index) {\r\n    let newState = this.updateArray(this.state.display2level, index);\r\n    this.setState({ display2level: newState });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"page\">\r\n        <div className=\"lists\">\r\n          <TreeList dataList={this.state.leftList}\r\n            display={this.state.display}\r\n            display2level={this.state.display2level}\r\n            onChangeDisplay={this.displayChange}\r\n            onChangeDisplay2Level={this.display2levelChange} />\r\n          <TreeList dataList={this.state.rightList}\r\n            display={this.state.display}\r\n            display2level={this.state.display2level}\r\n            onChangeDisplay={this.displayChange}\r\n            onChangeDisplay2Level={this.display2levelChange}\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport {App} from './App';\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));"],"sourceRoot":""}